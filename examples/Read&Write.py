# Import the necessary classes from the hyperDS module
from hyperDS import HyperDataStorage, HDSArchive, HDSFolder
# Just a function, never mind it just returns a path
from __init__ import example_path

# Create an instance of HyperDataStorage
hds = HyperDataStorage()

# HyperDataStorage supports two types of storage:
#   1) Folder, using the HDSFolder class
#   2) ZIP archive, using the HDSArchive class


# We can use the 'read' method to create either a folder or a ZIP archive.
# Parameters:
#     hdsobject: a class that inherits from HDSIo (HDSFolder/HDSArchive/maybe your own)
#     target_class: we will learn about it in the next example
#     Don't mind the other parameters for now; we will learn about them later.


# This is how we can read a ZIP archive (which contains main.hds), or create a new HDS archive if it doesn't exist:
hds.read(HDSArchive(example_path("Lesson: Read&Write.hds")))


# This is how we can read a folder (which contains main.hds), or create a new folder if it doesn't exist:
hds.read(HDSFolder(example_path("Lesson: Read&Writehds")))


# Now we have finished the reading part. What if we changed the data and need to save the changes?

# We can use the 'save' method to save changes.
# Parameters:
#     devlogs: prints variable name, value, and variable type if True
#     [OPTIONAL] destination: save the file to the given HDSIo or the HDSIo used when we read
#     [OPTIONAL] string_compression_func: calls the given function with arguments string (data to save into the file) and is_hds_code (whether it is HDS-generated string or custom) and saves the returning string to the HDSIo
#     [OPTIONAL] pop_empty_lines: removes empty lines in the data generated by the HDS
hds.save()


# Now any changes made to the data are saved to the folder Read&Writehds.
# Why is the data not saved to the archive?
#     Because we are calling hds.read with HDSFolder on line 19, so the HDSIo is changed to the HDSFolder.
# If you need to save the data to the archive, then you can do it like this:
hds.save(destination=HDSArchive(example_path("Lesson: Read&Write.hds")))