import os
with open(os.path.join(os.path.dirname(os.path.abspath(__file__)),".config")) as vers:
    VERSION = vers.read().split("=")[1].split('"',maxsplit=1)[1].split('"')[0]
print("""
Features:
    * multiple file support
    * importing .hds files
    * error checking (Indentation, Datatype)
    * folder and archive support
    * float support
    * python evaluation support:
        * export/export_to function to export a variable and value to HyperDS.variables/python_objs
    * runtime support for set_variable,add_python_obj
    * More efficiency by using HDSArchive/HDSFolder as a replacement for file path in hds.read()
    * Extra zipfile args support by using HDSArchive
    * Removed repetition of variable while setting variable
    * open_file method to open a file in HDSFolder/HDSArchive with updating all dependent objects 
    * TraceDict
        * updates the hds code if any change was made to the dict after set_variable
    * TraceList
        * Functions like TraceDict but a list
    * Bug fixes
""")

updater = os.path.join(os.path.dirname(__file__),"updater.py")
with open(updater) as f:exec(f.read(),globals())
update(VERSION)
